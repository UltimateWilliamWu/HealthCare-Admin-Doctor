<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.system.mapper.DoctorMapper">
    
    <resultMap type="Doctor" id="DoctorResult">
        <result property="id"    column="id"    />
        <result property="department"    column="department"    />
        <result property="doctorname"    column="doctorname"    />
        <result property="sex"    column="sex"    />
        <result property="position"    column="position"    />
        <result property="salary"    column="salary"    />
        <result property="password"    column="password"    />
        <result property="message"    column="message"    />
    </resultMap>

    <sql id="selectDoctorVo">
        select id, department, doctorname, sex, position, salary, password, message from doctor
    </sql>

    <select id="selectDoctorList" parameterType="Doctor" resultMap="DoctorResult">
        <include refid="selectDoctorVo"/>
        <where>  
            <if test="department != null  and department != ''"> and department = #{department}</if>
            <if test="doctorname != null  and doctorname != ''"> and doctorname like concat('%', #{doctorname}, '%')</if>
            <if test="sex != null  and sex != ''"> and sex = #{sex}</if>
            <if test="position != null  and position != ''"> and position = #{position}</if>
            <if test="salary != null "> and salary = #{salary}</if>
            <if test="password != null  and password != ''"> and password = #{password}</if>
            <if test="message != null  and message != ''"> and message = #{message}</if>
        </where>
    </select>
    
    <select id="selectDoctorById" parameterType="Integer" resultMap="DoctorResult">
        <include refid="selectDoctorVo"/>
        where id = #{id}
    </select>
        
    <insert id="insertDoctor" parameterType="Doctor" useGeneratedKeys="true" keyProperty="id">
        insert into doctor
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="department != null">department,</if>
            <if test="doctorname != null">doctorname,</if>
            <if test="sex != null">sex,</if>
            <if test="position != null">position,</if>
            <if test="salary != null">salary,</if>
            <if test="password != null">password,</if>
            <if test="message != null">message,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="department != null">#{department},</if>
            <if test="doctorname != null">#{doctorname},</if>
            <if test="sex != null">#{sex},</if>
            <if test="position != null">#{position},</if>
            <if test="salary != null">#{salary},</if>
            <if test="password != null">#{password},</if>
            <if test="message != null">#{message},</if>
         </trim>
    </insert>

    <update id="updateDoctor" parameterType="Doctor">
        update doctor
        <trim prefix="SET" suffixOverrides=",">
            <if test="department != null">department = #{department},</if>
            <if test="doctorname != null">doctorname = #{doctorname},</if>
            <if test="sex != null">sex = #{sex},</if>
            <if test="position != null">position = #{position},</if>
            <if test="salary != null">salary = #{salary},</if>
            <if test="password != null">password = #{password},</if>
            <if test="message != null">message = #{message},</if>
        </trim>
        where id = #{id}
    </update>

    <delete id="deleteDoctorById" parameterType="Integer">
        delete from doctor where id = #{id}
    </delete>

    <delete id="deleteDoctorByIds" parameterType="String">
        delete from doctor where id in 
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>
</mapper>