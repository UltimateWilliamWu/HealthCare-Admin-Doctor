<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.system.mapper.DepartmentMapper">
    
    <resultMap type="Department" id="DepartmentResult">
        <result property="id"    column="id"    />
        <result property="departmentname"    column="departmentname"    />
        <result property="grade"    column="grade"    />
    </resultMap>

    <resultMap id="DepartmentDoctorResult" type="Department" extends="DepartmentResult">
        <collection property="doctorList" notNullColumn="sub_id" javaType="java.util.List" resultMap="DoctorResult" />
    </resultMap>

    <resultMap type="Doctor" id="DoctorResult">
        <result property="id"    column="sub_id"    />
        <result property="department"    column="sub_department"    />
        <result property="doctorname"    column="sub_doctorname"    />
        <result property="sex"    column="sub_sex"    />
        <result property="position"    column="sub_position"    />
        <result property="salary"    column="sub_salary"    />
        <result property="password"    column="sub_password"    />
        <result property="message"    column="sub_message"    />
    </resultMap>

    <sql id="selectDepartmentVo">
        select id, departmentname, grade from department
    </sql>

    <select id="selectDepartmentList" parameterType="Department" resultMap="DepartmentResult">
        <include refid="selectDepartmentVo"/>
        <where>  
            <if test="departmentname != null  and departmentname != ''"> and departmentname like concat('%', #{departmentname}, '%')</if>
            <if test="grade != null  and grade != ''"> and grade = #{grade}</if>
        </where>
    </select>
    
    <select id="selectDepartmentById" parameterType="Integer" resultMap="DepartmentDoctorResult">
        select a.id, a.departmentname, a.grade,
 b.id as sub_id, b.department as sub_department, b.doctorname as sub_doctorname, b.sex as sub_sex, b.position as sub_position, b.salary as sub_salary, b.password as sub_password, b.message as sub_message
        from department a
        left join doctor b on b.department = a.id
        where a.id = #{id}
    </select>
        
    <insert id="insertDepartment" parameterType="Department" useGeneratedKeys="true" keyProperty="id">
        insert into department
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="departmentname != null">departmentname,</if>
            <if test="grade != null">grade,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="departmentname != null">#{departmentname},</if>
            <if test="grade != null">#{grade},</if>
         </trim>
    </insert>

    <update id="updateDepartment" parameterType="Department">
        update department
        <trim prefix="SET" suffixOverrides=",">
            <if test="departmentname != null">departmentname = #{departmentname},</if>
            <if test="grade != null">grade = #{grade},</if>
        </trim>
        where id = #{id}
    </update>

    <delete id="deleteDepartmentById" parameterType="Integer">
        delete from department where id = #{id}
    </delete>

    <delete id="deleteDepartmentByIds" parameterType="String">
        delete from department where id in 
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>
    
    <delete id="deleteDoctorByDepartments" parameterType="String">
        delete from doctor where department in 
        <foreach item="department" collection="array" open="(" separator="," close=")">
            #{department}
        </foreach>
    </delete>

    <delete id="deleteDoctorByDepartment" parameterType="Integer">
        delete from doctor where department = #{department}
    </delete>

    <insert id="batchDoctor">
        insert into doctor( id, department, doctorname, sex, position, salary, password, message) values
		<foreach item="item" index="index" collection="list" separator=",">
            ( #{item.id}, #{item.department}, #{item.doctorname}, #{item.sex}, #{item.position}, #{item.salary}, #{item.password}, #{item.message})
        </foreach>
    </insert>
</mapper>